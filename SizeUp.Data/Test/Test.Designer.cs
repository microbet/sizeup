//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_ZipCode_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "ZipCode", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.ZipCode), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_City_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.City), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_County_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.County), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_GeographicLocation_Granularity", "Granularity", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Granularity), "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.GeographicLocation), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Metro_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Metro", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Metro), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Nation_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Nation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Nation), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Place_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Place), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Region_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Region", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Region), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_State_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "State", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.State), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Division_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Division", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Division), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_City_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.State), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.City), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Place_City", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.City), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Place), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_County_Metro", "Metro", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Metro), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.County), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_County_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.State), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.County), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Place_County", "County", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.County), "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Place), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Division_Region", "Region", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Region), "Division", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Division), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_State_Division", "Division", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Division), "State", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.State), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "CityCounty", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.City), "County", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.County))]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "ZipCodePlace", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Place), "ZipCode", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.ZipCode))]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Business_County", "County", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.County), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Business_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Industry), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Business_Metro", "Metro", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Metro), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Business_State", "State", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.State), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Business_ZipCode", "ZipCode", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.ZipCode), "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_BusinessData_Business", "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Business), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.BusinessData), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_LegacyBusinessSEOKey_Business", "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Business), "LegacyBusinessSEOKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.LegacyBusinessSEOKey), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_BusinessData_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.BusinessData), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_BusinessData_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Industry), "BusinessData", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.BusinessData), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_City_CityType", "CityType", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.CityType), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.City), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_LegacyCommunitySEOKey_City", "City", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.City), "LegacyCommunitySEOKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.LegacyCommunitySEOKey), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Industry_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.Industry), "Industry1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Industry), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_IndustryKeyword_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Industry), "IndustryKeyword", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.IndustryKeyword), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_LegacyIndustrySEOKey_Industry", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Industry), "LegacyIndustrySEOKey", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.LegacyIndustrySEOKey), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_NAICS_NAICS", "NAIC", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(SizeUp.Data.Test.NAIC), "NAIC1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.NAIC), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_PlaceKeyword_Place", "Place", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.Place), "PlaceKeyword", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.PlaceKeyword), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "BusinessCity", "Business", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Business), "City", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.City))]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "IndustryNAICS", "Industry", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Industry), "NAIC", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.NAIC))]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Geography_GeographicLocation", "GeographicLocation", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographicLocation), "Geography", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Geography), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Geography_GeographyClass", "GeographyClass", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographyClass), "Geography", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Geography), true)]
[assembly: EdmRelationshipAttribute("SizeUp.Data.Test", "FK_Geography_GeographySource", "GeographySource", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(SizeUp.Data.Test.GeographySource), "Geography", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(SizeUp.Data.Test.Geography), true)]

#endregion

namespace SizeUp.Data.Test
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class TestContext : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new TestContext object using the connection string found in the 'TestContext' section of the application configuration file.
        /// </summary>
        public TestContext() : base("name=TestContext", "TestContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TestContext object.
        /// </summary>
        public TestContext(string connectionString) : base(connectionString, "TestContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new TestContext object.
        /// </summary>
        public TestContext(EntityConnection connection) : base(connection, "TestContext")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeographicLocation> GeographicLocations
        {
            get
            {
                if ((_GeographicLocations == null))
                {
                    _GeographicLocations = base.CreateObjectSet<GeographicLocation>("GeographicLocations");
                }
                return _GeographicLocations;
            }
        }
        private ObjectSet<GeographicLocation> _GeographicLocations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ZipCode> ZipCodes
        {
            get
            {
                if ((_ZipCodes == null))
                {
                    _ZipCodes = base.CreateObjectSet<ZipCode>("ZipCodes");
                }
                return _ZipCodes;
            }
        }
        private ObjectSet<ZipCode> _ZipCodes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<City> Cities
        {
            get
            {
                if ((_Cities == null))
                {
                    _Cities = base.CreateObjectSet<City>("Cities");
                }
                return _Cities;
            }
        }
        private ObjectSet<City> _Cities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<County> Counties
        {
            get
            {
                if ((_Counties == null))
                {
                    _Counties = base.CreateObjectSet<County>("Counties");
                }
                return _Counties;
            }
        }
        private ObjectSet<County> _Counties;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Granularity> Granularities
        {
            get
            {
                if ((_Granularities == null))
                {
                    _Granularities = base.CreateObjectSet<Granularity>("Granularities");
                }
                return _Granularities;
            }
        }
        private ObjectSet<Granularity> _Granularities;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Metro> Metroes
        {
            get
            {
                if ((_Metroes == null))
                {
                    _Metroes = base.CreateObjectSet<Metro>("Metroes");
                }
                return _Metroes;
            }
        }
        private ObjectSet<Metro> _Metroes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Nation> Nations
        {
            get
            {
                if ((_Nations == null))
                {
                    _Nations = base.CreateObjectSet<Nation>("Nations");
                }
                return _Nations;
            }
        }
        private ObjectSet<Nation> _Nations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Place> Places
        {
            get
            {
                if ((_Places == null))
                {
                    _Places = base.CreateObjectSet<Place>("Places");
                }
                return _Places;
            }
        }
        private ObjectSet<Place> _Places;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Region> Regions
        {
            get
            {
                if ((_Regions == null))
                {
                    _Regions = base.CreateObjectSet<Region>("Regions");
                }
                return _Regions;
            }
        }
        private ObjectSet<Region> _Regions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<State> States
        {
            get
            {
                if ((_States == null))
                {
                    _States = base.CreateObjectSet<State>("States");
                }
                return _States;
            }
        }
        private ObjectSet<State> _States;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Division> Divisions
        {
            get
            {
                if ((_Divisions == null))
                {
                    _Divisions = base.CreateObjectSet<Division>("Divisions");
                }
                return _Divisions;
            }
        }
        private ObjectSet<Division> _Divisions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Business> Businesses
        {
            get
            {
                if ((_Businesses == null))
                {
                    _Businesses = base.CreateObjectSet<Business>("Businesses");
                }
                return _Businesses;
            }
        }
        private ObjectSet<Business> _Businesses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BusinessData> BusinessDatas
        {
            get
            {
                if ((_BusinessDatas == null))
                {
                    _BusinessDatas = base.CreateObjectSet<BusinessData>("BusinessDatas");
                }
                return _BusinessDatas;
            }
        }
        private ObjectSet<BusinessData> _BusinessDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<CityType> CityTypes
        {
            get
            {
                if ((_CityTypes == null))
                {
                    _CityTypes = base.CreateObjectSet<CityType>("CityTypes");
                }
                return _CityTypes;
            }
        }
        private ObjectSet<CityType> _CityTypes;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeographyClass> GeographyClasses
        {
            get
            {
                if ((_GeographyClasses == null))
                {
                    _GeographyClasses = base.CreateObjectSet<GeographyClass>("GeographyClasses");
                }
                return _GeographyClasses;
            }
        }
        private ObjectSet<GeographyClass> _GeographyClasses;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<GeographySource> GeographySources
        {
            get
            {
                if ((_GeographySources == null))
                {
                    _GeographySources = base.CreateObjectSet<GeographySource>("GeographySources");
                }
                return _GeographySources;
            }
        }
        private ObjectSet<GeographySource> _GeographySources;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Industry> Industries
        {
            get
            {
                if ((_Industries == null))
                {
                    _Industries = base.CreateObjectSet<Industry>("Industries");
                }
                return _Industries;
            }
        }
        private ObjectSet<Industry> _Industries;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<IndustryKeyword> IndustryKeywords
        {
            get
            {
                if ((_IndustryKeywords == null))
                {
                    _IndustryKeywords = base.CreateObjectSet<IndustryKeyword>("IndustryKeywords");
                }
                return _IndustryKeywords;
            }
        }
        private ObjectSet<IndustryKeyword> _IndustryKeywords;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LegacyBusinessSEOKey> LegacyBusinessSEOKeys
        {
            get
            {
                if ((_LegacyBusinessSEOKeys == null))
                {
                    _LegacyBusinessSEOKeys = base.CreateObjectSet<LegacyBusinessSEOKey>("LegacyBusinessSEOKeys");
                }
                return _LegacyBusinessSEOKeys;
            }
        }
        private ObjectSet<LegacyBusinessSEOKey> _LegacyBusinessSEOKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LegacyCommunitySEOKey> LegacyCommunitySEOKeys
        {
            get
            {
                if ((_LegacyCommunitySEOKeys == null))
                {
                    _LegacyCommunitySEOKeys = base.CreateObjectSet<LegacyCommunitySEOKey>("LegacyCommunitySEOKeys");
                }
                return _LegacyCommunitySEOKeys;
            }
        }
        private ObjectSet<LegacyCommunitySEOKey> _LegacyCommunitySEOKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<LegacyIndustrySEOKey> LegacyIndustrySEOKeys
        {
            get
            {
                if ((_LegacyIndustrySEOKeys == null))
                {
                    _LegacyIndustrySEOKeys = base.CreateObjectSet<LegacyIndustrySEOKey>("LegacyIndustrySEOKeys");
                }
                return _LegacyIndustrySEOKeys;
            }
        }
        private ObjectSet<LegacyIndustrySEOKey> _LegacyIndustrySEOKeys;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NAIC> NAICS
        {
            get
            {
                if ((_NAICS == null))
                {
                    _NAICS = base.CreateObjectSet<NAIC>("NAICS");
                }
                return _NAICS;
            }
        }
        private ObjectSet<NAIC> _NAICS;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<PlaceKeyword> PlaceKeywords
        {
            get
            {
                if ((_PlaceKeywords == null))
                {
                    _PlaceKeywords = base.CreateObjectSet<PlaceKeyword>("PlaceKeywords");
                }
                return _PlaceKeywords;
            }
        }
        private ObjectSet<PlaceKeyword> _PlaceKeywords;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ResourceString> ResourceStrings
        {
            get
            {
                if ((_ResourceStrings == null))
                {
                    _ResourceStrings = base.CreateObjectSet<ResourceString>("ResourceStrings");
                }
                return _ResourceStrings;
            }
        }
        private ObjectSet<ResourceString> _ResourceStrings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Geography> Geographies
        {
            get
            {
                if ((_Geographies == null))
                {
                    _Geographies = base.CreateObjectSet<Geography>("Geographies");
                }
                return _Geographies;
            }
        }
        private ObjectSet<Geography> _Geographies;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeographicLocations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographicLocations(GeographicLocation geographicLocation)
        {
            base.AddObject("GeographicLocations", geographicLocation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ZipCodes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToZipCodes(ZipCode zipCode)
        {
            base.AddObject("ZipCodes", zipCode);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Cities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCities(City city)
        {
            base.AddObject("Cities", city);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Counties EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCounties(County county)
        {
            base.AddObject("Counties", county);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Granularities EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGranularities(Granularity granularity)
        {
            base.AddObject("Granularities", granularity);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Metroes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMetroes(Metro metro)
        {
            base.AddObject("Metroes", metro);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Nations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNations(Nation nation)
        {
            base.AddObject("Nations", nation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Places EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaces(Place place)
        {
            base.AddObject("Places", place);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Regions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToRegions(Region region)
        {
            base.AddObject("Regions", region);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the States EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToStates(State state)
        {
            base.AddObject("States", state);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Divisions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDivisions(Division division)
        {
            base.AddObject("Divisions", division);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Businesses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBusinesses(Business business)
        {
            base.AddObject("Businesses", business);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BusinessDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBusinessDatas(BusinessData businessData)
        {
            base.AddObject("BusinessDatas", businessData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the CityTypes EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToCityTypes(CityType cityType)
        {
            base.AddObject("CityTypes", cityType);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeographyClasses EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographyClasses(GeographyClass geographyClass)
        {
            base.AddObject("GeographyClasses", geographyClass);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the GeographySources EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographySources(GeographySource geographySource)
        {
            base.AddObject("GeographySources", geographySource);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Industries EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustries(Industry industry)
        {
            base.AddObject("Industries", industry);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the IndustryKeywords EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToIndustryKeywords(IndustryKeyword industryKeyword)
        {
            base.AddObject("IndustryKeywords", industryKeyword);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LegacyBusinessSEOKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLegacyBusinessSEOKeys(LegacyBusinessSEOKey legacyBusinessSEOKey)
        {
            base.AddObject("LegacyBusinessSEOKeys", legacyBusinessSEOKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LegacyCommunitySEOKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLegacyCommunitySEOKeys(LegacyCommunitySEOKey legacyCommunitySEOKey)
        {
            base.AddObject("LegacyCommunitySEOKeys", legacyCommunitySEOKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the LegacyIndustrySEOKeys EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToLegacyIndustrySEOKeys(LegacyIndustrySEOKey legacyIndustrySEOKey)
        {
            base.AddObject("LegacyIndustrySEOKeys", legacyIndustrySEOKey);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NAICS EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNAICS(NAIC nAIC)
        {
            base.AddObject("NAICS", nAIC);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the PlaceKeywords EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToPlaceKeywords(PlaceKeyword placeKeyword)
        {
            base.AddObject("PlaceKeywords", placeKeyword);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ResourceStrings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToResourceStrings(ResourceString resourceString)
        {
            base.AddObject("ResourceStrings", resourceString);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Geographies EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGeographies(Geography geography)
        {
            base.AddObject("Geographies", geography);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Business")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Business : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Business object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="inBusiness">Initial value of the InBusiness property.</param>
        public static Business CreateBusiness(global::System.Int64 id, global::System.Boolean isActive, global::System.Boolean inBusiness)
        {
            Business business = new Business();
            business.Id = id;
            business.IsActive = isActive;
            business.InBusiness = inBusiness;
            return business;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Address
        {
            get
            {
                return _Address;
            }
            set
            {
                OnAddressChanging(value);
                ReportPropertyChanging("Address");
                _Address = StructuralObject.SetValidValue(value, true, "Address");
                ReportPropertyChanged("Address");
                OnAddressChanged();
            }
        }
        private global::System.String _Address;
        partial void OnAddressChanging(global::System.String value);
        partial void OnAddressChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String City
        {
            get
            {
                return _City;
            }
            set
            {
                OnCityChanging(value);
                ReportPropertyChanging("City");
                _City = StructuralObject.SetValidValue(value, true, "City");
                ReportPropertyChanged("City");
                OnCityChanged();
            }
        }
        private global::System.String _City;
        partial void OnCityChanging(global::System.String value);
        partial void OnCityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ZipPlus4
        {
            get
            {
                return _ZipPlus4;
            }
            set
            {
                OnZipPlus4Changing(value);
                ReportPropertyChanging("ZipPlus4");
                _ZipPlus4 = StructuralObject.SetValidValue(value, true, "ZipPlus4");
                ReportPropertyChanged("ZipPlus4");
                OnZipPlus4Changed();
            }
        }
        private global::System.String _ZipPlus4;
        partial void OnZipPlus4Changing(global::System.String value);
        partial void OnZipPlus4Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PrimaryWebURL
        {
            get
            {
                return _PrimaryWebURL;
            }
            set
            {
                OnPrimaryWebURLChanging(value);
                ReportPropertyChanging("PrimaryWebURL");
                _PrimaryWebURL = StructuralObject.SetValidValue(value, true, "PrimaryWebURL");
                ReportPropertyChanged("PrimaryWebURL");
                OnPrimaryWebURLChanged();
            }
        }
        private global::System.String _PrimaryWebURL;
        partial void OnPrimaryWebURLChanging(global::System.String value);
        partial void OnPrimaryWebURLChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Phone
        {
            get
            {
                return _Phone;
            }
            set
            {
                OnPhoneChanging(value);
                ReportPropertyChanging("Phone");
                _Phone = StructuralObject.SetValidValue(value, true, "Phone");
                ReportPropertyChanged("Phone");
                OnPhoneChanged();
            }
        }
        private global::System.String _Phone;
        partial void OnPhoneChanging(global::System.String value);
        partial void OnPhoneChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String BusinessStatusCode
        {
            get
            {
                return _BusinessStatusCode;
            }
            set
            {
                OnBusinessStatusCodeChanging(value);
                ReportPropertyChanging("BusinessStatusCode");
                _BusinessStatusCode = StructuralObject.SetValidValue(value, true, "BusinessStatusCode");
                ReportPropertyChanged("BusinessStatusCode");
                OnBusinessStatusCodeChanged();
            }
        }
        private global::System.String _BusinessStatusCode;
        partial void OnBusinessStatusCodeChanging(global::System.String value);
        partial void OnBusinessStatusCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String WorkAtHomeFlag
        {
            get
            {
                return _WorkAtHomeFlag;
            }
            set
            {
                OnWorkAtHomeFlagChanging(value);
                ReportPropertyChanging("WorkAtHomeFlag");
                _WorkAtHomeFlag = StructuralObject.SetValidValue(value, true, "WorkAtHomeFlag");
                ReportPropertyChanged("WorkAtHomeFlag");
                OnWorkAtHomeFlagChanged();
            }
        }
        private global::System.String _WorkAtHomeFlag;
        partial void OnWorkAtHomeFlagChanging(global::System.String value);
        partial void OnWorkAtHomeFlagChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PublicCompanyIndicator
        {
            get
            {
                return _PublicCompanyIndicator;
            }
            set
            {
                OnPublicCompanyIndicatorChanging(value);
                ReportPropertyChanging("PublicCompanyIndicator");
                _PublicCompanyIndicator = StructuralObject.SetValidValue(value, true, "PublicCompanyIndicator");
                ReportPropertyChanged("PublicCompanyIndicator");
                OnPublicCompanyIndicatorChanged();
            }
        }
        private global::System.String _PublicCompanyIndicator;
        partial void OnPublicCompanyIndicatorChanging(global::System.String value);
        partial void OnPublicCompanyIndicatorChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String FirmCode
        {
            get
            {
                return _FirmCode;
            }
            set
            {
                OnFirmCodeChanging(value);
                ReportPropertyChanging("FirmCode");
                _FirmCode = StructuralObject.SetValidValue(value, true, "FirmCode");
                ReportPropertyChanged("FirmCode");
                OnFirmCodeChanged();
            }
        }
        private global::System.String _FirmCode;
        partial void OnFirmCodeChanging(global::System.String value);
        partial void OnFirmCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearEstablished
        {
            get
            {
                return _YearEstablished;
            }
            set
            {
                OnYearEstablishedChanging(value);
                ReportPropertyChanging("YearEstablished");
                _YearEstablished = StructuralObject.SetValidValue(value, "YearEstablished");
                ReportPropertyChanged("YearEstablished");
                OnYearEstablishedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearEstablished;
        partial void OnYearEstablishedChanging(Nullable<global::System.Int32> value);
        partial void OnYearEstablishedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearAppeared
        {
            get
            {
                return _YearAppeared;
            }
            set
            {
                OnYearAppearedChanging(value);
                ReportPropertyChanging("YearAppeared");
                _YearAppeared = StructuralObject.SetValidValue(value, "YearAppeared");
                ReportPropertyChanged("YearAppeared");
                OnYearAppearedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearAppeared;
        partial void OnYearAppearedChanging(Nullable<global::System.Int32> value);
        partial void OnYearAppearedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> InfoGroupId
        {
            get
            {
                return _InfoGroupId;
            }
            set
            {
                OnInfoGroupIdChanging(value);
                ReportPropertyChanging("InfoGroupId");
                _InfoGroupId = StructuralObject.SetValidValue(value, "InfoGroupId");
                ReportPropertyChanged("InfoGroupId");
                OnInfoGroupIdChanged();
            }
        }
        private Nullable<global::System.Int64> _InfoGroupId;
        partial void OnInfoGroupIdChanging(Nullable<global::System.Int64> value);
        partial void OnInfoGroupIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Lat
        {
            get
            {
                return _Lat;
            }
            set
            {
                OnLatChanging(value);
                ReportPropertyChanging("Lat");
                _Lat = StructuralObject.SetValidValue(value, "Lat");
                ReportPropertyChanged("Lat");
                OnLatChanged();
            }
        }
        private Nullable<global::System.Decimal> _Lat;
        partial void OnLatChanging(Nullable<global::System.Decimal> value);
        partial void OnLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> Long
        {
            get
            {
                return _Long;
            }
            set
            {
                OnLongChanging(value);
                ReportPropertyChanging("Long");
                _Long = StructuralObject.SetValidValue(value, "Long");
                ReportPropertyChanged("Long");
                OnLongChanged();
            }
        }
        private Nullable<global::System.Decimal> _Long;
        partial void OnLongChanging(Nullable<global::System.Decimal> value);
        partial void OnLongChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MatchLevel
        {
            get
            {
                return _MatchLevel;
            }
            set
            {
                OnMatchLevelChanging(value);
                ReportPropertyChanging("MatchLevel");
                _MatchLevel = StructuralObject.SetValidValue(value, true, "MatchLevel");
                ReportPropertyChanged("MatchLevel");
                OnMatchLevelChanged();
            }
        }
        private global::System.String _MatchLevel;
        partial void OnMatchLevelChanging(global::System.String value);
        partial void OnMatchLevelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int64> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int64> value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ZipCodeId
        {
            get
            {
                return _ZipCodeId;
            }
            set
            {
                OnZipCodeIdChanging(value);
                ReportPropertyChanging("ZipCodeId");
                _ZipCodeId = StructuralObject.SetValidValue(value, "ZipCodeId");
                ReportPropertyChanged("ZipCodeId");
                OnZipCodeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _ZipCodeId;
        partial void OnZipCodeIdChanging(Nullable<global::System.Int64> value);
        partial void OnZipCodeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CountyId;
        partial void OnCountyIdChanging(Nullable<global::System.Int64> value);
        partial void OnCountyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> MetroId
        {
            get
            {
                return _MetroId;
            }
            set
            {
                OnMetroIdChanging(value);
                ReportPropertyChanging("MetroId");
                _MetroId = StructuralObject.SetValidValue(value, "MetroId");
                ReportPropertyChanged("MetroId");
                OnMetroIdChanged();
            }
        }
        private Nullable<global::System.Int64> _MetroId;
        partial void OnMetroIdChanging(Nullable<global::System.Int64> value);
        partial void OnMetroIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private Nullable<global::System.Int64> _StateId;
        partial void OnStateIdChanging(Nullable<global::System.Int64> value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean InBusiness
        {
            get
            {
                return _InBusiness;
            }
            set
            {
                OnInBusinessChanging(value);
                ReportPropertyChanging("InBusiness");
                _InBusiness = StructuralObject.SetValidValue(value, "InBusiness");
                ReportPropertyChanged("InBusiness");
                OnInBusinessChanged();
            }
        }
        private global::System.Boolean _InBusiness;
        partial void OnInBusinessChanging(global::System.Boolean value);
        partial void OnInBusinessChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_County", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Business_County", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Business_County", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Business_County", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("SizeUp.Data.Test.FK_Business_County", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Business_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Business_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Business_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("SizeUp.Data.Test.FK_Business_Industry", "Industry", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_Metro", "Metro")]
        public Metro Metro
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Business_Metro", "Metro").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Business_Metro", "Metro").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Metro> MetroReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Business_Metro", "Metro");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Metro>("SizeUp.Data.Test.FK_Business_Metro", "Metro", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_Business_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_Business_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_Business_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("SizeUp.Data.Test.FK_Business_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_ZipCode", "ZipCode")]
        public ZipCode ZipCode
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_Business_ZipCode", "ZipCode").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_Business_ZipCode", "ZipCode").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ZipCode> ZipCodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_Business_ZipCode", "ZipCode");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ZipCode>("SizeUp.Data.Test.FK_Business_ZipCode", "ZipCode", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_Business", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_Business", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_Business", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyBusinessSEOKey_Business", "LegacyBusinessSEOKey")]
        public EntityCollection<LegacyBusinessSEOKey> LegacyBusinessSEOKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LegacyBusinessSEOKey>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "LegacyBusinessSEOKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LegacyBusinessSEOKey>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "LegacyBusinessSEOKey", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "BusinessCity", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("SizeUp.Data.Test.BusinessCity", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("SizeUp.Data.Test.BusinessCity", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="BusinessData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BusinessData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BusinessData object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="quarter">Initial value of the Quarter property.</param>
        /// <param name="geographicLocationId">Initial value of the GeographicLocationId property.</param>
        /// <param name="businessId">Initial value of the BusinessId property.</param>
        public static BusinessData CreateBusinessData(global::System.Int64 id, global::System.Int32 year, global::System.Int32 quarter, global::System.Int64 geographicLocationId, global::System.Int64 businessId)
        {
            BusinessData businessData = new BusinessData();
            businessData.Id = id;
            businessData.Year = year;
            businessData.Quarter = quarter;
            businessData.GeographicLocationId = geographicLocationId;
            businessData.BusinessId = businessId;
            return businessData;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value, "Year");
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Quarter
        {
            get
            {
                return _Quarter;
            }
            set
            {
                OnQuarterChanging(value);
                ReportPropertyChanging("Quarter");
                _Quarter = StructuralObject.SetValidValue(value, "Quarter");
                ReportPropertyChanged("Quarter");
                OnQuarterChanged();
            }
        }
        private global::System.Int32 _Quarter;
        partial void OnQuarterChanging(global::System.Int32 value);
        partial void OnQuarterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private Nullable<global::System.Int64> _IndustryId;
        partial void OnIndustryIdChanging(Nullable<global::System.Int64> value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographicLocationId
        {
            get
            {
                return _GeographicLocationId;
            }
            set
            {
                OnGeographicLocationIdChanging(value);
                ReportPropertyChanging("GeographicLocationId");
                _GeographicLocationId = StructuralObject.SetValidValue(value, "GeographicLocationId");
                ReportPropertyChanged("GeographicLocationId");
                OnGeographicLocationIdChanged();
            }
        }
        private global::System.Int64 _GeographicLocationId;
        partial void OnGeographicLocationIdChanging(global::System.Int64 value);
        partial void OnGeographicLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BusinessId
        {
            get
            {
                return _BusinessId;
            }
            set
            {
                OnBusinessIdChanging(value);
                ReportPropertyChanging("BusinessId");
                _BusinessId = StructuralObject.SetValidValue(value, "BusinessId");
                ReportPropertyChanged("BusinessId");
                OnBusinessIdChanged();
            }
        }
        private global::System.Int64 _BusinessId;
        partial void OnBusinessIdChanging(global::System.Int64 value);
        partial void OnBusinessIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Revenue
        {
            get
            {
                return _Revenue;
            }
            set
            {
                OnRevenueChanging(value);
                ReportPropertyChanging("Revenue");
                _Revenue = StructuralObject.SetValidValue(value, "Revenue");
                ReportPropertyChanged("Revenue");
                OnRevenueChanged();
            }
        }
        private Nullable<global::System.Int64> _Revenue;
        partial void OnRevenueChanging(Nullable<global::System.Int64> value);
        partial void OnRevenueChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Employees
        {
            get
            {
                return _Employees;
            }
            set
            {
                OnEmployeesChanging(value);
                ReportPropertyChanging("Employees");
                _Employees = StructuralObject.SetValidValue(value, "Employees");
                ReportPropertyChanged("Employees");
                OnEmployeesChanged();
            }
        }
        private Nullable<global::System.Int64> _Employees;
        partial void OnEmployeesChanging(Nullable<global::System.Int64> value);
        partial void OnEmployeesChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearEstablished
        {
            get
            {
                return _YearEstablished;
            }
            set
            {
                OnYearEstablishedChanging(value);
                ReportPropertyChanging("YearEstablished");
                _YearEstablished = StructuralObject.SetValidValue(value, "YearEstablished");
                ReportPropertyChanged("YearEstablished");
                OnYearEstablishedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearEstablished;
        partial void OnYearEstablishedChanging(Nullable<global::System.Int32> value);
        partial void OnYearEstablishedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> YearAppeared
        {
            get
            {
                return _YearAppeared;
            }
            set
            {
                OnYearAppearedChanging(value);
                ReportPropertyChanging("YearAppeared");
                _YearAppeared = StructuralObject.SetValidValue(value, "YearAppeared");
                ReportPropertyChanged("YearAppeared");
                OnYearAppearedChanged();
            }
        }
        private Nullable<global::System.Int32> _YearAppeared;
        partial void OnYearAppearedChanging(Nullable<global::System.Int32> value);
        partial void OnYearAppearedChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_Business", "Business")]
        public Business Business
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_BusinessData_Business", "Business").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_BusinessData_Business", "Business").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Business> BusinessReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_BusinessData_Business", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Business>("SizeUp.Data.Test.FK_BusinessData_Business", "Business", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_BusinessData_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_BusinessData_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_BusinessData_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("SizeUp.Data.Test.FK_BusinessData_Industry", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="City")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class City : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new City object.
        /// </summary>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="fIPS">Initial value of the FIPS property.</param>
        /// <param name="stateId">Initial value of the StateId property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static City CreateCity(global::System.Int64 cityId, global::System.String name, global::System.String fIPS, global::System.Int64 stateId, global::System.Boolean isActive, global::System.Int64 id)
        {
            City city = new City();
            city.CityId = cityId;
            city.Name = name;
            city.FIPS = fIPS;
            city.StateId = stateId;
            city.IsActive = isActive;
            city.Id = id;
            return city;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FIPS
        {
            get
            {
                return _FIPS;
            }
            set
            {
                OnFIPSChanging(value);
                ReportPropertyChanging("FIPS");
                _FIPS = StructuralObject.SetValidValue(value, false, "FIPS");
                ReportPropertyChanged("FIPS");
                OnFIPSChanged();
            }
        }
        private global::System.String _FIPS;
        partial void OnFIPSChanging(global::System.String value);
        partial void OnFIPSChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private global::System.Int64 _StateId;
        partial void OnStateIdChanging(global::System.Int64 value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> CityTypeId
        {
            get
            {
                return _CityTypeId;
            }
            set
            {
                OnCityTypeIdChanging(value);
                ReportPropertyChanging("CityTypeId");
                _CityTypeId = StructuralObject.SetValidValue(value, "CityTypeId");
                ReportPropertyChanged("CityTypeId");
                OnCityTypeIdChanged();
            }
        }
        private Nullable<global::System.Int64> _CityTypeId;
        partial void OnCityTypeIdChanging(Nullable<global::System.Int64> value);
        partial void OnCityTypeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_City_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_City_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_City_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_City_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_City_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_City_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_City_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("SizeUp.Data.Test.FK_City_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_City", "Place")]
        public EntityCollection<Place> Places
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Place>("SizeUp.Data.Test.FK_Place_City", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Place>("SizeUp.Data.Test.FK_Place_City", "Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "CityCounty", "County")]
        public EntityCollection<County> Counties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<County>("SizeUp.Data.Test.CityCounty", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<County>("SizeUp.Data.Test.CityCounty", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_CityType", "CityType")]
        public CityType CityType
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CityType>("SizeUp.Data.Test.FK_City_CityType", "CityType").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CityType>("SizeUp.Data.Test.FK_City_CityType", "CityType").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<CityType> CityTypeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<CityType>("SizeUp.Data.Test.FK_City_CityType", "CityType");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<CityType>("SizeUp.Data.Test.FK_City_CityType", "CityType", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyCommunitySEOKey_City", "LegacyCommunitySEOKey")]
        public EntityCollection<LegacyCommunitySEOKey> LegacyCommunitySEOKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LegacyCommunitySEOKey>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "LegacyCommunitySEOKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LegacyCommunitySEOKey>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "LegacyCommunitySEOKey", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "BusinessCity", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.BusinessCity", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.BusinessCity", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="CityType")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class CityType : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new CityType object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        public static CityType CreateCityType(global::System.Int64 id, global::System.Boolean isActive)
        {
            CityType cityType = new CityType();
            cityType.Id = id;
            cityType.IsActive = isActive;
            return cityType;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String CensusClassCode
        {
            get
            {
                return _CensusClassCode;
            }
            set
            {
                OnCensusClassCodeChanging(value);
                ReportPropertyChanging("CensusClassCode");
                _CensusClassCode = StructuralObject.SetValidValue(value, true, "CensusClassCode");
                ReportPropertyChanged("CensusClassCode");
                OnCensusClassCodeChanged();
            }
        }
        private global::System.String _CensusClassCode;
        partial void OnCensusClassCodeChanging(global::System.String value);
        partial void OnCensusClassCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LegalStatisticalAreaDescriptionCode
        {
            get
            {
                return _LegalStatisticalAreaDescriptionCode;
            }
            set
            {
                OnLegalStatisticalAreaDescriptionCodeChanging(value);
                ReportPropertyChanging("LegalStatisticalAreaDescriptionCode");
                _LegalStatisticalAreaDescriptionCode = StructuralObject.SetValidValue(value, true, "LegalStatisticalAreaDescriptionCode");
                ReportPropertyChanged("LegalStatisticalAreaDescriptionCode");
                OnLegalStatisticalAreaDescriptionCodeChanged();
            }
        }
        private global::System.String _LegalStatisticalAreaDescriptionCode;
        partial void OnLegalStatisticalAreaDescriptionCodeChanging(global::System.String value);
        partial void OnLegalStatisticalAreaDescriptionCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SourceId
        {
            get
            {
                return _SourceId;
            }
            set
            {
                OnSourceIdChanging(value);
                ReportPropertyChanging("SourceId");
                _SourceId = StructuralObject.SetValidValue(value, true, "SourceId");
                ReportPropertyChanged("SourceId");
                OnSourceIdChanged();
            }
        }
        private global::System.String _SourceId;
        partial void OnSourceIdChanging(global::System.String value);
        partial void OnSourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_CityType", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("SizeUp.Data.Test.FK_City_CityType", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("SizeUp.Data.Test.FK_City_CityType", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="County")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class County : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new County object.
        /// </summary>
        /// <param name="countyId">Initial value of the CountyId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="fIPS">Initial value of the FIPS property.</param>
        /// <param name="stateId">Initial value of the StateId property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static County CreateCounty(global::System.Int64 countyId, global::System.String name, global::System.String sEOKey, global::System.String fIPS, global::System.Int64 stateId, global::System.Int64 id)
        {
            County county = new County();
            county.CountyId = countyId;
            county.Name = name;
            county.SEOKey = sEOKey;
            county.FIPS = fIPS;
            county.StateId = stateId;
            county.Id = id;
            return county;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private global::System.Int64 _CountyId;
        partial void OnCountyIdChanging(global::System.Int64 value);
        partial void OnCountyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FIPS
        {
            get
            {
                return _FIPS;
            }
            set
            {
                OnFIPSChanging(value);
                ReportPropertyChanging("FIPS");
                _FIPS = StructuralObject.SetValidValue(value, false, "FIPS");
                ReportPropertyChanged("FIPS");
                OnFIPSChanged();
            }
        }
        private global::System.String _FIPS;
        partial void OnFIPSChanging(global::System.String value);
        partial void OnFIPSChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private global::System.Int64 _StateId;
        partial void OnStateIdChanging(global::System.Int64 value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> MetroId
        {
            get
            {
                return _MetroId;
            }
            set
            {
                OnMetroIdChanging(value);
                ReportPropertyChanging("MetroId");
                _MetroId = StructuralObject.SetValidValue(value, "MetroId");
                ReportPropertyChanged("MetroId");
                OnMetroIdChanged();
            }
        }
        private Nullable<global::System.Int64> _MetroId;
        partial void OnMetroIdChanging(Nullable<global::System.Int64> value);
        partial void OnMetroIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_County_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_County_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_County_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_County_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_Metro", "Metro")]
        public Metro Metro
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_County_Metro", "Metro").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_County_Metro", "Metro").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Metro> MetroReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_County_Metro", "Metro");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Metro>("SizeUp.Data.Test.FK_County_Metro", "Metro", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_State", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_County_State", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_County_State", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_County_State", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("SizeUp.Data.Test.FK_County_State", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_County", "Place")]
        public EntityCollection<Place> Places
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Place>("SizeUp.Data.Test.FK_Place_County", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Place>("SizeUp.Data.Test.FK_Place_County", "Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "CityCounty", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("SizeUp.Data.Test.CityCounty", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("SizeUp.Data.Test.CityCounty", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_County", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_County", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_County", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Division")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Division : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Division object.
        /// </summary>
        /// <param name="divisionId">Initial value of the DivisionId property.</param>
        /// <param name="regionId">Initial value of the RegionId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Division CreateDivision(global::System.Int64 divisionId, global::System.Int64 regionId, global::System.String name, global::System.Int64 id)
        {
            Division division = new Division();
            division.DivisionId = divisionId;
            division.RegionId = regionId;
            division.Name = name;
            division.Id = id;
            return division;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 DivisionId
        {
            get
            {
                return _DivisionId;
            }
            set
            {
                OnDivisionIdChanging(value);
                ReportPropertyChanging("DivisionId");
                _DivisionId = StructuralObject.SetValidValue(value, "DivisionId");
                ReportPropertyChanged("DivisionId");
                OnDivisionIdChanged();
            }
        }
        private global::System.Int64 _DivisionId;
        partial void OnDivisionIdChanging(global::System.Int64 value);
        partial void OnDivisionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RegionId
        {
            get
            {
                return _RegionId;
            }
            set
            {
                OnRegionIdChanging(value);
                ReportPropertyChanging("RegionId");
                _RegionId = StructuralObject.SetValidValue(value, "RegionId");
                ReportPropertyChanged("RegionId");
                OnRegionIdChanged();
            }
        }
        private global::System.Int64 _RegionId;
        partial void OnRegionIdChanging(global::System.Int64 value);
        partial void OnRegionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Division_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Division_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Division_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Division_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Division_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Division_Region", "Region")]
        public Region Region
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Division_Region", "Region").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Division_Region", "Region").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Region> RegionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Division_Region", "Region");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Region>("SizeUp.Data.Test.FK_Division_Region", "Region", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_State_Division", "State")]
        public EntityCollection<State> States
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<State>("SizeUp.Data.Test.FK_State_Division", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<State>("SizeUp.Data.Test.FK_State_Division", "State", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="GeographicLocation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeographicLocation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeographicLocation object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="granularityId">Initial value of the GranularityId property.</param>
        public static GeographicLocation CreateGeographicLocation(global::System.Int64 id, global::System.Int64 granularityId)
        {
            GeographicLocation geographicLocation = new GeographicLocation();
            geographicLocation.Id = id;
            geographicLocation.GranularityId = granularityId;
            return geographicLocation;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GranularityId
        {
            get
            {
                return _GranularityId;
            }
            set
            {
                OnGranularityIdChanging(value);
                ReportPropertyChanging("GranularityId");
                _GranularityId = StructuralObject.SetValidValue(value, "GranularityId");
                ReportPropertyChanged("GranularityId");
                OnGranularityIdChanged();
            }
        }
        private global::System.Int64 _GranularityId;
        partial void OnGranularityIdChanging(global::System.Int64 value);
        partial void OnGranularityIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_ZipCode_GeographicLocation", "ZipCode")]
        public ZipCode ZipCode
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "ZipCode").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "ZipCode").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ZipCode> ZipCodeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ZipCode>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "ZipCode");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ZipCode>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "ZipCode", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_GeographicLocation", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_City_GeographicLocation", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_City_GeographicLocation", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_City_GeographicLocation", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("SizeUp.Data.Test.FK_City_GeographicLocation", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_GeographicLocation", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_County_GeographicLocation", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_County_GeographicLocation", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_County_GeographicLocation", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("SizeUp.Data.Test.FK_County_GeographicLocation", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_GeographicLocation_Granularity", "Granularity")]
        public Granularity Granularity
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "Granularity").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "Granularity").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Granularity> GranularityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Granularity>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "Granularity");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Granularity>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "Granularity", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Metro_GeographicLocation", "Metro")]
        public Metro Metro
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "Metro").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "Metro").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Metro> MetroReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Metro>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "Metro");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Metro>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "Metro", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Nation_GeographicLocation", "Nation")]
        public Nation Nation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "Nation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "Nation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Nation> NationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Nation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "Nation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Nation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "Nation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_GeographicLocation", "Place")]
        public Place Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_Place_GeographicLocation", "Place").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_Place_GeographicLocation", "Place").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Place> PlaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_Place_GeographicLocation", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Place>("SizeUp.Data.Test.FK_Place_GeographicLocation", "Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Region_GeographicLocation", "Region")]
        public Region Region
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Region_GeographicLocation", "Region").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Region_GeographicLocation", "Region").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Region> RegionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Region>("SizeUp.Data.Test.FK_Region_GeographicLocation", "Region");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Region>("SizeUp.Data.Test.FK_Region_GeographicLocation", "Region", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_State_GeographicLocation", "State")]
        public State State
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_State_GeographicLocation", "State").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_State_GeographicLocation", "State").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<State> StateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<State>("SizeUp.Data.Test.FK_State_GeographicLocation", "State");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<State>("SizeUp.Data.Test.FK_State_GeographicLocation", "State", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Division_GeographicLocation", "Division")]
        public Division Division
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_Division_GeographicLocation", "Division").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_Division_GeographicLocation", "Division").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Division> DivisionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_Division_GeographicLocation", "Division");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Division>("SizeUp.Data.Test.FK_Division_GeographicLocation", "Division", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_GeographicLocation", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_GeographicLocation", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographicLocation", "Geography")]
        public EntityCollection<Geography> Geographies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "Geography");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "Geography", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Geography")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Geography : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Geography object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="polygon">Initial value of the Polygon property.</param>
        /// <param name="geographySourceId">Initial value of the GeographySourceId property.</param>
        /// <param name="geographyClassId">Initial value of the GeographyClassId property.</param>
        /// <param name="geographicLocationId">Initial value of the GeographicLocationId property.</param>
        /// <param name="north">Initial value of the North property.</param>
        /// <param name="south">Initial value of the South property.</param>
        /// <param name="east">Initial value of the East property.</param>
        /// <param name="west">Initial value of the West property.</param>
        public static Geography CreateGeography(global::System.Int64 id, global::System.Data.Spatial.DbGeography polygon, global::System.Int64 geographySourceId, global::System.Int64 geographyClassId, global::System.Int64 geographicLocationId, global::System.Double north, global::System.Double south, global::System.Double east, global::System.Double west)
        {
            Geography geography = new Geography();
            geography.Id = id;
            geography.Polygon = polygon;
            geography.GeographySourceId = geographySourceId;
            geography.GeographyClassId = geographyClassId;
            geography.GeographicLocationId = geographicLocationId;
            geography.North = north;
            geography.South = south;
            geography.East = east;
            geography.West = west;
            return geography;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Data.Spatial.DbGeography Polygon
        {
            get
            {
                return _Polygon;
            }
            set
            {
                OnPolygonChanging(value);
                ReportPropertyChanging("Polygon");
                _Polygon = StructuralObject.SetValidValue(value, false, "Polygon");
                ReportPropertyChanged("Polygon");
                OnPolygonChanged();
            }
        }
        private global::System.Data.Spatial.DbGeography _Polygon;
        partial void OnPolygonChanging(global::System.Data.Spatial.DbGeography value);
        partial void OnPolygonChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographySourceId
        {
            get
            {
                return _GeographySourceId;
            }
            set
            {
                OnGeographySourceIdChanging(value);
                ReportPropertyChanging("GeographySourceId");
                _GeographySourceId = StructuralObject.SetValidValue(value, "GeographySourceId");
                ReportPropertyChanged("GeographySourceId");
                OnGeographySourceIdChanged();
            }
        }
        private global::System.Int64 _GeographySourceId;
        partial void OnGeographySourceIdChanging(global::System.Int64 value);
        partial void OnGeographySourceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographyClassId
        {
            get
            {
                return _GeographyClassId;
            }
            set
            {
                OnGeographyClassIdChanging(value);
                ReportPropertyChanging("GeographyClassId");
                _GeographyClassId = StructuralObject.SetValidValue(value, "GeographyClassId");
                ReportPropertyChanged("GeographyClassId");
                OnGeographyClassIdChanged();
            }
        }
        private global::System.Int64 _GeographyClassId;
        partial void OnGeographyClassIdChanging(global::System.Int64 value);
        partial void OnGeographyClassIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 GeographicLocationId
        {
            get
            {
                return _GeographicLocationId;
            }
            set
            {
                OnGeographicLocationIdChanging(value);
                ReportPropertyChanging("GeographicLocationId");
                _GeographicLocationId = StructuralObject.SetValidValue(value, "GeographicLocationId");
                ReportPropertyChanged("GeographicLocationId");
                OnGeographicLocationIdChanged();
            }
        }
        private global::System.Int64 _GeographicLocationId;
        partial void OnGeographicLocationIdChanging(global::System.Int64 value);
        partial void OnGeographicLocationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double North
        {
            get
            {
                return _North;
            }
            set
            {
                OnNorthChanging(value);
                ReportPropertyChanging("North");
                _North = StructuralObject.SetValidValue(value, "North");
                ReportPropertyChanged("North");
                OnNorthChanged();
            }
        }
        private global::System.Double _North;
        partial void OnNorthChanging(global::System.Double value);
        partial void OnNorthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double South
        {
            get
            {
                return _South;
            }
            set
            {
                OnSouthChanging(value);
                ReportPropertyChanging("South");
                _South = StructuralObject.SetValidValue(value, "South");
                ReportPropertyChanged("South");
                OnSouthChanged();
            }
        }
        private global::System.Double _South;
        partial void OnSouthChanging(global::System.Double value);
        partial void OnSouthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double East
        {
            get
            {
                return _East;
            }
            set
            {
                OnEastChanging(value);
                ReportPropertyChanging("East");
                _East = StructuralObject.SetValidValue(value, "East");
                ReportPropertyChanged("East");
                OnEastChanged();
            }
        }
        private global::System.Double _East;
        partial void OnEastChanging(global::System.Double value);
        partial void OnEastChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double West
        {
            get
            {
                return _West;
            }
            set
            {
                OnWestChanging(value);
                ReportPropertyChanging("West");
                _West = StructuralObject.SetValidValue(value, "West");
                ReportPropertyChanged("West");
                OnWestChanged();
            }
        }
        private global::System.Double _West;
        partial void OnWestChanging(global::System.Double value);
        partial void OnWestChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> CenterLat
        {
            get
            {
                return _CenterLat;
            }
            set
            {
                OnCenterLatChanging(value);
                ReportPropertyChanging("CenterLat");
                _CenterLat = StructuralObject.SetValidValue(value, "CenterLat");
                ReportPropertyChanged("CenterLat");
                OnCenterLatChanged();
            }
        }
        private Nullable<global::System.Double> _CenterLat;
        partial void OnCenterLatChanging(Nullable<global::System.Double> value);
        partial void OnCenterLatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Double> CenterLong
        {
            get
            {
                return _CenterLong;
            }
            set
            {
                OnCenterLongChanging(value);
                ReportPropertyChanging("CenterLong");
                _CenterLong = StructuralObject.SetValidValue(value, "CenterLong");
                ReportPropertyChanged("CenterLong");
                OnCenterLongChanged();
            }
        }
        private Nullable<global::System.Double> _CenterLong;
        partial void OnCenterLongChanging(Nullable<global::System.Double> value);
        partial void OnCenterLongChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Geography_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographyClass", "GeographyClass")]
        public GeographyClass GeographyClass
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographyClass>("SizeUp.Data.Test.FK_Geography_GeographyClass", "GeographyClass").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographyClass>("SizeUp.Data.Test.FK_Geography_GeographyClass", "GeographyClass").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographyClass> GeographyClassReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographyClass>("SizeUp.Data.Test.FK_Geography_GeographyClass", "GeographyClass");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographyClass>("SizeUp.Data.Test.FK_Geography_GeographyClass", "GeographyClass", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographySource", "GeographySource")]
        public GeographySource GeographySource
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographySource>("SizeUp.Data.Test.FK_Geography_GeographySource", "GeographySource").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographySource>("SizeUp.Data.Test.FK_Geography_GeographySource", "GeographySource").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographySource> GeographySourceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographySource>("SizeUp.Data.Test.FK_Geography_GeographySource", "GeographySource");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographySource>("SizeUp.Data.Test.FK_Geography_GeographySource", "GeographySource", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="GeographyClass")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeographyClass : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeographyClass object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static GeographyClass CreateGeographyClass(global::System.Int64 id, global::System.String name)
        {
            GeographyClass geographyClass = new GeographyClass();
            geographyClass.Id = id;
            geographyClass.Name = name;
            return geographyClass;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographyClass", "Geography")]
        public EntityCollection<Geography> Geographies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographyClass", "Geography");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographyClass", "Geography", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="GeographySource")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class GeographySource : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new GeographySource object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="date">Initial value of the Date property.</param>
        public static GeographySource CreateGeographySource(global::System.Int64 id, global::System.String name, global::System.DateTime date)
        {
            GeographySource geographySource = new GeographySource();
            geographySource.Id = id;
            geographySource.Name = name;
            geographySource.Date = date;
            return geographySource;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Url
        {
            get
            {
                return _Url;
            }
            set
            {
                OnUrlChanging(value);
                ReportPropertyChanging("Url");
                _Url = StructuralObject.SetValidValue(value, true, "Url");
                ReportPropertyChanged("Url");
                OnUrlChanged();
            }
        }
        private global::System.String _Url;
        partial void OnUrlChanging(global::System.String value);
        partial void OnUrlChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value, "Date");
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Geography_GeographySource", "Geography")]
        public EntityCollection<Geography> Geographies
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographySource", "Geography");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Geography>("SizeUp.Data.Test.FK_Geography_GeographySource", "Geography", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Granularity")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Granularity : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Granularity object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static Granularity CreateGranularity(global::System.Int64 id, global::System.String name)
        {
            Granularity granularity = new Granularity();
            granularity.Id = id;
            granularity.Name = name;
            return granularity;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_GeographicLocation_Granularity", "GeographicLocation")]
        public EntityCollection<GeographicLocation> GeographicLocations
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<GeographicLocation>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<GeographicLocation>("SizeUp.Data.Test.FK_GeographicLocation_Granularity", "GeographicLocation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Industry")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Industry : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Industry object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sicCode">Initial value of the SicCode property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="isDisabled">Initial value of the IsDisabled property.</param>
        public static Industry CreateIndustry(global::System.Int64 id, global::System.String sicCode, global::System.String name, global::System.String sEOKey, global::System.Boolean isActive, global::System.Boolean isDisabled)
        {
            Industry industry = new Industry();
            industry.Id = id;
            industry.SicCode = sicCode;
            industry.Name = name;
            industry.SEOKey = sEOKey;
            industry.IsActive = isActive;
            industry.IsDisabled = isDisabled;
            return industry;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SicCode
        {
            get
            {
                return _SicCode;
            }
            set
            {
                OnSicCodeChanging(value);
                ReportPropertyChanging("SicCode");
                _SicCode = StructuralObject.SetValidValue(value, false, "SicCode");
                ReportPropertyChanged("SicCode");
                OnSicCodeChanged();
            }
        }
        private global::System.String _SicCode;
        partial void OnSicCodeChanging(global::System.String value);
        partial void OnSicCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String IndustrySpecificCode
        {
            get
            {
                return _IndustrySpecificCode;
            }
            set
            {
                OnIndustrySpecificCodeChanging(value);
                ReportPropertyChanging("IndustrySpecificCode");
                _IndustrySpecificCode = StructuralObject.SetValidValue(value, true, "IndustrySpecificCode");
                ReportPropertyChanged("IndustrySpecificCode");
                OnIndustrySpecificCodeChanged();
            }
        }
        private global::System.String _IndustrySpecificCode;
        partial void OnIndustrySpecificCodeChanging(global::System.String value);
        partial void OnIndustrySpecificCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsDisabled
        {
            get
            {
                return _IsDisabled;
            }
            set
            {
                OnIsDisabledChanging(value);
                ReportPropertyChanging("IsDisabled");
                _IsDisabled = StructuralObject.SetValidValue(value, "IsDisabled");
                ReportPropertyChanged("IsDisabled");
                OnIsDisabledChanged();
            }
        }
        private global::System.Boolean _IsDisabled;
        partial void OnIsDisabledChanging(global::System.Boolean value);
        partial void OnIsDisabledChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
                OnParentIdChanging(value);
                ReportPropertyChanging("ParentId");
                _ParentId = StructuralObject.SetValidValue(value, "ParentId");
                ReportPropertyChanged("ParentId");
                OnParentIdChanged();
            }
        }
        private Nullable<global::System.Int64> _ParentId;
        partial void OnParentIdChanging(Nullable<global::System.Int64> value);
        partial void OnParentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_Industry", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_Industry", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_Industry", "Business", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_BusinessData_Industry", "BusinessData")]
        public EntityCollection<BusinessData> BusinessDatas
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_Industry", "BusinessData");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BusinessData>("SizeUp.Data.Test.FK_BusinessData_Industry", "BusinessData", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Industry_Industry", "Industry1")]
        public EntityCollection<Industry> Industry1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Industry_Industry", "Industry")]
        public Industry Industry2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> Industry2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("SizeUp.Data.Test.FK_Industry_Industry", "Industry", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_IndustryKeyword_Industry", "IndustryKeyword")]
        public EntityCollection<IndustryKeyword> IndustryKeywords
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<IndustryKeyword>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "IndustryKeyword");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<IndustryKeyword>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "IndustryKeyword", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyIndustrySEOKey_Industry", "LegacyIndustrySEOKey")]
        public EntityCollection<LegacyIndustrySEOKey> LegacyIndustrySEOKeys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<LegacyIndustrySEOKey>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "LegacyIndustrySEOKey");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<LegacyIndustrySEOKey>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "LegacyIndustrySEOKey", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "IndustryNAICS", "NAIC")]
        public EntityCollection<NAIC> NAICS
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NAIC>("SizeUp.Data.Test.IndustryNAICS", "NAIC");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NAIC>("SizeUp.Data.Test.IndustryNAICS", "NAIC", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="IndustryKeyword")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class IndustryKeyword : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new IndustryKeyword object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="industryId">Initial value of the IndustryId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="sortOrder">Initial value of the SortOrder property.</param>
        public static IndustryKeyword CreateIndustryKeyword(global::System.Int64 id, global::System.Int64 industryId, global::System.String name, global::System.Int32 sortOrder)
        {
            IndustryKeyword industryKeyword = new IndustryKeyword();
            industryKeyword.Id = id;
            industryKeyword.IndustryId = industryId;
            industryKeyword.Name = name;
            industryKeyword.SortOrder = sortOrder;
            return industryKeyword;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private global::System.Int64 _IndustryId;
        partial void OnIndustryIdChanging(global::System.Int64 value);
        partial void OnIndustryIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SortOrder
        {
            get
            {
                return _SortOrder;
            }
            set
            {
                OnSortOrderChanging(value);
                ReportPropertyChanging("SortOrder");
                _SortOrder = StructuralObject.SetValidValue(value, "SortOrder");
                ReportPropertyChanged("SortOrder");
                OnSortOrderChanged();
            }
        }
        private global::System.Int32 _SortOrder;
        partial void OnSortOrderChanging(global::System.Int32 value);
        partial void OnSortOrderChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_IndustryKeyword_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("SizeUp.Data.Test.FK_IndustryKeyword_Industry", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="LegacyBusinessSEOKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LegacyBusinessSEOKey : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LegacyBusinessSEOKey object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="businessId">Initial value of the businessId property.</param>
        public static LegacyBusinessSEOKey CreateLegacyBusinessSEOKey(global::System.Int64 id, global::System.String sEOKey, global::System.Int64 businessId)
        {
            LegacyBusinessSEOKey legacyBusinessSEOKey = new LegacyBusinessSEOKey();
            legacyBusinessSEOKey.Id = id;
            legacyBusinessSEOKey.SEOKey = sEOKey;
            legacyBusinessSEOKey.businessId = businessId;
            return legacyBusinessSEOKey;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 businessId
        {
            get
            {
                return _businessId;
            }
            set
            {
                OnbusinessIdChanging(value);
                ReportPropertyChanging("businessId");
                _businessId = StructuralObject.SetValidValue(value, "businessId");
                ReportPropertyChanged("businessId");
                OnbusinessIdChanged();
            }
        }
        private global::System.Int64 _businessId;
        partial void OnbusinessIdChanging(global::System.Int64 value);
        partial void OnbusinessIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyBusinessSEOKey_Business", "Business")]
        public Business Business
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "Business").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "Business").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Business> BusinessReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Business>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Business>("SizeUp.Data.Test.FK_LegacyBusinessSEOKey_Business", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="LegacyCommunitySEOKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LegacyCommunitySEOKey : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LegacyCommunitySEOKey object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="cityId">Initial value of the CityId property.</param>
        public static LegacyCommunitySEOKey CreateLegacyCommunitySEOKey(global::System.Int64 id, global::System.String sEOKey, global::System.Int64 cityId)
        {
            LegacyCommunitySEOKey legacyCommunitySEOKey = new LegacyCommunitySEOKey();
            legacyCommunitySEOKey.Id = id;
            legacyCommunitySEOKey.SEOKey = sEOKey;
            legacyCommunitySEOKey.CityId = cityId;
            return legacyCommunitySEOKey;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyCommunitySEOKey_City", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("SizeUp.Data.Test.FK_LegacyCommunitySEOKey_City", "City", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="LegacyIndustrySEOKey")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class LegacyIndustrySEOKey : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new LegacyIndustrySEOKey object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="industryId">Initial value of the IndustryId property.</param>
        public static LegacyIndustrySEOKey CreateLegacyIndustrySEOKey(global::System.Int64 id, global::System.String sEOKey, global::System.Int64 industryId)
        {
            LegacyIndustrySEOKey legacyIndustrySEOKey = new LegacyIndustrySEOKey();
            legacyIndustrySEOKey.Id = id;
            legacyIndustrySEOKey.SEOKey = sEOKey;
            legacyIndustrySEOKey.IndustryId = industryId;
            return legacyIndustrySEOKey;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 IndustryId
        {
            get
            {
                return _IndustryId;
            }
            set
            {
                OnIndustryIdChanging(value);
                ReportPropertyChanging("IndustryId");
                _IndustryId = StructuralObject.SetValidValue(value, "IndustryId");
                ReportPropertyChanged("IndustryId");
                OnIndustryIdChanged();
            }
        }
        private global::System.Int64 _IndustryId;
        partial void OnIndustryIdChanging(global::System.Int64 value);
        partial void OnIndustryIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_LegacyIndustrySEOKey_Industry", "Industry")]
        public Industry Industry
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "Industry").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "Industry").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Industry> IndustryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Industry>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Industry>("SizeUp.Data.Test.FK_LegacyIndustrySEOKey_Industry", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Metro")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Metro : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Metro object.
        /// </summary>
        /// <param name="metroId">Initial value of the MetroId property.</param>
        /// <param name="fIPS">Initial value of the FIPS property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Metro CreateMetro(global::System.Int64 metroId, global::System.String fIPS, global::System.String name, global::System.Int64 id)
        {
            Metro metro = new Metro();
            metro.MetroId = metroId;
            metro.FIPS = fIPS;
            metro.Name = name;
            metro.Id = id;
            return metro;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 MetroId
        {
            get
            {
                return _MetroId;
            }
            set
            {
                OnMetroIdChanging(value);
                ReportPropertyChanging("MetroId");
                _MetroId = StructuralObject.SetValidValue(value, "MetroId");
                ReportPropertyChanged("MetroId");
                OnMetroIdChanged();
            }
        }
        private global::System.Int64 _MetroId;
        partial void OnMetroIdChanging(global::System.Int64 value);
        partial void OnMetroIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FIPS
        {
            get
            {
                return _FIPS;
            }
            set
            {
                OnFIPSChanging(value);
                ReportPropertyChanging("FIPS");
                _FIPS = StructuralObject.SetValidValue(value, false, "FIPS");
                ReportPropertyChanged("FIPS");
                OnFIPSChanged();
            }
        }
        private global::System.String _FIPS;
        partial void OnFIPSChanging(global::System.String value);
        partial void OnFIPSChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Metro_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Metro_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_Metro", "County")]
        public EntityCollection<County> Counties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<County>("SizeUp.Data.Test.FK_County_Metro", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<County>("SizeUp.Data.Test.FK_County_Metro", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_Metro", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_Metro", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_Metro", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="NAIC")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NAIC : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NAIC object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="nAICSCode">Initial value of the NAICSCode property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static NAIC CreateNAIC(global::System.Int64 id, global::System.String nAICSCode, global::System.String name)
        {
            NAIC nAIC = new NAIC();
            nAIC.Id = id;
            nAIC.NAICSCode = nAICSCode;
            nAIC.Name = name;
            return nAIC;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String NAICSCode
        {
            get
            {
                return _NAICSCode;
            }
            set
            {
                OnNAICSCodeChanging(value);
                ReportPropertyChanging("NAICSCode");
                _NAICSCode = StructuralObject.SetValidValue(value, false, "NAICSCode");
                ReportPropertyChanged("NAICSCode");
                OnNAICSCodeChanged();
            }
        }
        private global::System.String _NAICSCode;
        partial void OnNAICSCodeChanging(global::System.String value);
        partial void OnNAICSCodeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> ParentId
        {
            get
            {
                return _ParentId;
            }
            set
            {
                OnParentIdChanging(value);
                ReportPropertyChanging("ParentId");
                _ParentId = StructuralObject.SetValidValue(value, "ParentId");
                ReportPropertyChanged("ParentId");
                OnParentIdChanged();
            }
        }
        private Nullable<global::System.Int64> _ParentId;
        partial void OnParentIdChanging(Nullable<global::System.Int64> value);
        partial void OnParentIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_NAICS_NAICS", "NAIC1")]
        public EntityCollection<NAIC> NAICS1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC1", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_NAICS_NAICS", "NAIC")]
        public NAIC NAIC1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<NAIC> NAIC1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<NAIC>("SizeUp.Data.Test.FK_NAICS_NAICS", "NAIC", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "IndustryNAICS", "Industry")]
        public EntityCollection<Industry> Industries
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Industry>("SizeUp.Data.Test.IndustryNAICS", "Industry");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Industry>("SizeUp.Data.Test.IndustryNAICS", "Industry", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Nation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Nation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Nation object.
        /// </summary>
        /// <param name="nationId">Initial value of the NationId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="isActive">Initial value of the IsActive property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Nation CreateNation(global::System.Int64 nationId, global::System.String name, global::System.Boolean isActive, global::System.Int64 id)
        {
            Nation nation = new Nation();
            nation.NationId = nationId;
            nation.Name = name;
            nation.IsActive = isActive;
            nation.Id = id;
            return nation;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 NationId
        {
            get
            {
                return _NationId;
            }
            set
            {
                OnNationIdChanging(value);
                ReportPropertyChanging("NationId");
                _NationId = StructuralObject.SetValidValue(value, "NationId");
                ReportPropertyChanged("NationId");
                OnNationIdChanged();
            }
        }
        private global::System.Int64 _NationId;
        partial void OnNationIdChanging(global::System.Int64 value);
        partial void OnNationIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, true, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsActive
        {
            get
            {
                return _IsActive;
            }
            set
            {
                OnIsActiveChanging(value);
                ReportPropertyChanging("IsActive");
                _IsActive = StructuralObject.SetValidValue(value, "IsActive");
                ReportPropertyChanged("IsActive");
                OnIsActiveChanged();
            }
        }
        private global::System.Boolean _IsActive;
        partial void OnIsActiveChanging(global::System.Boolean value);
        partial void OnIsActiveChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Nation_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Nation_GeographicLocation", "GeographicLocation", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Place")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Place : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Place object.
        /// </summary>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="cityId">Initial value of the CityId property.</param>
        /// <param name="countyId">Initial value of the CountyId property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Place CreatePlace(global::System.Int64 placeId, global::System.Int64 cityId, global::System.Int64 countyId, global::System.Int64 id)
        {
            Place place = new Place();
            place.PlaceId = placeId;
            place.CityId = cityId;
            place.CountyId = countyId;
            place.Id = id;
            return place;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                OnPlaceIdChanging(value);
                ReportPropertyChanging("PlaceId");
                _PlaceId = StructuralObject.SetValidValue(value, "PlaceId");
                ReportPropertyChanged("PlaceId");
                OnPlaceIdChanged();
            }
        }
        private global::System.Int64 _PlaceId;
        partial void OnPlaceIdChanging(global::System.Int64 value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CityId
        {
            get
            {
                return _CityId;
            }
            set
            {
                OnCityIdChanging(value);
                ReportPropertyChanging("CityId");
                _CityId = StructuralObject.SetValidValue(value, "CityId");
                ReportPropertyChanged("CityId");
                OnCityIdChanged();
            }
        }
        private global::System.Int64 _CityId;
        partial void OnCityIdChanging(global::System.Int64 value);
        partial void OnCityIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 CountyId
        {
            get
            {
                return _CountyId;
            }
            set
            {
                OnCountyIdChanging(value);
                ReportPropertyChanging("CountyId");
                _CountyId = StructuralObject.SetValidValue(value, "CountyId");
                ReportPropertyChanged("CountyId");
                OnCountyIdChanged();
            }
        }
        private global::System.Int64 _CountyId;
        partial void OnCountyIdChanging(global::System.Int64 value);
        partial void OnCountyIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Place_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Place_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Place_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Place_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_City", "City")]
        public City City
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_Place_City", "City").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_Place_City", "City").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<City> CityReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<City>("SizeUp.Data.Test.FK_Place_City", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<City>("SizeUp.Data.Test.FK_Place_City", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Place_County", "County")]
        public County County
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Place_County", "County").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Place_County", "County").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<County> CountyReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<County>("SizeUp.Data.Test.FK_Place_County", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<County>("SizeUp.Data.Test.FK_Place_County", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "ZipCodePlace", "ZipCode")]
        public EntityCollection<ZipCode> ZipCodes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ZipCode>("SizeUp.Data.Test.ZipCodePlace", "ZipCode");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ZipCode>("SizeUp.Data.Test.ZipCodePlace", "ZipCode", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_PlaceKeyword_Place", "PlaceKeyword")]
        public EntityCollection<PlaceKeyword> PlaceKeywords
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PlaceKeyword>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "PlaceKeyword");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PlaceKeyword>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "PlaceKeyword", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="PlaceKeyword")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PlaceKeyword : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new PlaceKeyword object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="placeId">Initial value of the PlaceId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static PlaceKeyword CreatePlaceKeyword(global::System.Int64 id, global::System.Int64 placeId, global::System.String name)
        {
            PlaceKeyword placeKeyword = new PlaceKeyword();
            placeKeyword.Id = id;
            placeKeyword.PlaceId = placeId;
            placeKeyword.Name = name;
            return placeKeyword;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 PlaceId
        {
            get
            {
                return _PlaceId;
            }
            set
            {
                OnPlaceIdChanging(value);
                ReportPropertyChanging("PlaceId");
                _PlaceId = StructuralObject.SetValidValue(value, "PlaceId");
                ReportPropertyChanged("PlaceId");
                OnPlaceIdChanged();
            }
        }
        private global::System.Int64 _PlaceId;
        partial void OnPlaceIdChanging(global::System.Int64 value);
        partial void OnPlaceIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_PlaceKeyword_Place", "Place")]
        public Place Place
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "Place").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "Place").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Place> PlaceReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Place>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Place>("SizeUp.Data.Test.FK_PlaceKeyword_Place", "Place", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="Region")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Region : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Region object.
        /// </summary>
        /// <param name="regionId">Initial value of the RegionId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Region CreateRegion(global::System.Int64 regionId, global::System.String name, global::System.Int64 id)
        {
            Region region = new Region();
            region.RegionId = regionId;
            region.Name = name;
            region.Id = id;
            return region;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 RegionId
        {
            get
            {
                return _RegionId;
            }
            set
            {
                OnRegionIdChanging(value);
                ReportPropertyChanging("RegionId");
                _RegionId = StructuralObject.SetValidValue(value, "RegionId");
                ReportPropertyChanged("RegionId");
                OnRegionIdChanged();
            }
        }
        private global::System.Int64 _RegionId;
        partial void OnRegionIdChanging(global::System.Int64 value);
        partial void OnRegionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Region_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Region_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Region_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Region_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_Region_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Division_Region", "Division")]
        public EntityCollection<Division> Divisions
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Division>("SizeUp.Data.Test.FK_Division_Region", "Division");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Division>("SizeUp.Data.Test.FK_Division_Region", "Division", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="ResourceString")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ResourceString : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ResourceString object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="value">Initial value of the Value property.</param>
        public static ResourceString CreateResourceString(global::System.Int64 id, global::System.String name, global::System.String value)
        {
            ResourceString resourceString = new ResourceString();
            resourceString.Id = id;
            resourceString.Name = name;
            resourceString.Value = value;
            return resourceString;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Value
        {
            get
            {
                return _Value;
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, false, "Value");
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.String _Value;
        partial void OnValueChanging(global::System.String value);
        partial void OnValueChanged();

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="State")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class State : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new State object.
        /// </summary>
        /// <param name="stateId">Initial value of the StateId property.</param>
        /// <param name="fIPS">Initial value of the FIPS property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="abbreviation">Initial value of the Abbreviation property.</param>
        /// <param name="sEOKey">Initial value of the SEOKey property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static State CreateState(global::System.Int64 stateId, global::System.String fIPS, global::System.String name, global::System.String abbreviation, global::System.String sEOKey, global::System.Int64 id)
        {
            State state = new State();
            state.StateId = stateId;
            state.FIPS = fIPS;
            state.Name = name;
            state.Abbreviation = abbreviation;
            state.SEOKey = sEOKey;
            state.Id = id;
            return state;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 StateId
        {
            get
            {
                return _StateId;
            }
            set
            {
                OnStateIdChanging(value);
                ReportPropertyChanging("StateId");
                _StateId = StructuralObject.SetValidValue(value, "StateId");
                ReportPropertyChanged("StateId");
                OnStateIdChanged();
            }
        }
        private global::System.Int64 _StateId;
        partial void OnStateIdChanging(global::System.Int64 value);
        partial void OnStateIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FIPS
        {
            get
            {
                return _FIPS;
            }
            set
            {
                OnFIPSChanging(value);
                ReportPropertyChanging("FIPS");
                _FIPS = StructuralObject.SetValidValue(value, false, "FIPS");
                ReportPropertyChanged("FIPS");
                OnFIPSChanged();
            }
        }
        private global::System.String _FIPS;
        partial void OnFIPSChanging(global::System.String value);
        partial void OnFIPSChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Abbreviation
        {
            get
            {
                return _Abbreviation;
            }
            set
            {
                OnAbbreviationChanging(value);
                ReportPropertyChanging("Abbreviation");
                _Abbreviation = StructuralObject.SetValidValue(value, false, "Abbreviation");
                ReportPropertyChanged("Abbreviation");
                OnAbbreviationChanged();
            }
        }
        private global::System.String _Abbreviation;
        partial void OnAbbreviationChanging(global::System.String value);
        partial void OnAbbreviationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SEOKey
        {
            get
            {
                return _SEOKey;
            }
            set
            {
                OnSEOKeyChanging(value);
                ReportPropertyChanging("SEOKey");
                _SEOKey = StructuralObject.SetValidValue(value, false, "SEOKey");
                ReportPropertyChanged("SEOKey");
                OnSEOKeyChanged();
            }
        }
        private global::System.String _SEOKey;
        partial void OnSEOKeyChanging(global::System.String value);
        partial void OnSEOKeyChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> DivisionId
        {
            get
            {
                return _DivisionId;
            }
            set
            {
                OnDivisionIdChanging(value);
                ReportPropertyChanging("DivisionId");
                _DivisionId = StructuralObject.SetValidValue(value, "DivisionId");
                ReportPropertyChanged("DivisionId");
                OnDivisionIdChanged();
            }
        }
        private Nullable<global::System.Int64> _DivisionId;
        partial void OnDivisionIdChanging(Nullable<global::System.Int64> value);
        partial void OnDivisionIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_State_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_State_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_State_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_State_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_State_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_City_State", "City")]
        public EntityCollection<City> Cities
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<City>("SizeUp.Data.Test.FK_City_State", "City");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<City>("SizeUp.Data.Test.FK_City_State", "City", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_County_State", "County")]
        public EntityCollection<County> Counties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<County>("SizeUp.Data.Test.FK_County_State", "County");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<County>("SizeUp.Data.Test.FK_County_State", "County", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_State_Division", "Division")]
        public Division Division
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_State_Division", "Division").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_State_Division", "Division").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Division> DivisionReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Division>("SizeUp.Data.Test.FK_State_Division", "Division");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Division>("SizeUp.Data.Test.FK_State_Division", "Division", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_State", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_State", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_State", "Business", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="SizeUp.Data.Test", Name="ZipCode")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ZipCode : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ZipCode object.
        /// </summary>
        /// <param name="zipCodeId">Initial value of the ZipCodeId property.</param>
        /// <param name="zip">Initial value of the Zip property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static ZipCode CreateZipCode(global::System.Int64 zipCodeId, global::System.String zip, global::System.String name, global::System.Int64 id)
        {
            ZipCode zipCode = new ZipCode();
            zipCode.ZipCodeId = zipCodeId;
            zipCode.Zip = zip;
            zipCode.Name = name;
            zipCode.Id = id;
            return zipCode;
        }

        #endregion

        #region Simple Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ZipCodeId
        {
            get
            {
                return _ZipCodeId;
            }
            set
            {
                OnZipCodeIdChanging(value);
                ReportPropertyChanging("ZipCodeId");
                _ZipCodeId = StructuralObject.SetValidValue(value, "ZipCodeId");
                ReportPropertyChanged("ZipCodeId");
                OnZipCodeIdChanged();
            }
        }
        private global::System.Int64 _ZipCodeId;
        partial void OnZipCodeIdChanging(global::System.Int64 value);
        partial void OnZipCodeIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Zip
        {
            get
            {
                return _Zip;
            }
            set
            {
                OnZipChanging(value);
                ReportPropertyChanging("Zip");
                _Zip = StructuralObject.SetValidValue(value, false, "Zip");
                ReportPropertyChanged("Zip");
                OnZipChanged();
            }
        }
        private global::System.String _Zip;
        partial void OnZipChanging(global::System.String value);
        partial void OnZipChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false, "Name");
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value, "Id");
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();

        #endregion

        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_ZipCode_GeographicLocation", "GeographicLocation")]
        public GeographicLocation GeographicLocation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "GeographicLocation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "GeographicLocation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<GeographicLocation> GeographicLocationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "GeographicLocation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<GeographicLocation>("SizeUp.Data.Test.FK_ZipCode_GeographicLocation", "GeographicLocation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "ZipCodePlace", "Place")]
        public EntityCollection<Place> Places
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Place>("SizeUp.Data.Test.ZipCodePlace", "Place");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Place>("SizeUp.Data.Test.ZipCodePlace", "Place", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("SizeUp.Data.Test", "FK_Business_ZipCode", "Business")]
        public EntityCollection<Business> Businesses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_ZipCode", "Business");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Business>("SizeUp.Data.Test.FK_Business_ZipCode", "Business", value);
                }
            }
        }

        #endregion

    }

    #endregion

}
